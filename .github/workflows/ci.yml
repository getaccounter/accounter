name: CI
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.DO_SPACE_ACCESS_ID }} # says AWS, but is for digital ocean spaces
  AWS_SECRET_ACCESS_KEY: ${{ secrets.DO_SPACE_ACCESS_SECRET }} # says AWS, but is for digital ocean spaces
  TF_VAR_do_token: ${{ secrets.TF_VAR_DO_TOKEN }}
  TF_VAR_do_space_access_id: ${{ secrets.DO_SPACE_ACCESS_ID }}
  TF_VAR_do_space_access_secret: ${{ secrets.DO_SPACE_ACCESS_SECRET}}
  SKAFFOLD_DEFAULT_REPO: registry.digitalocean.com/accounter

jobs:
  health-checks:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2

      - name: create .env
        run: cp server/.env.example server/.env

      - name: pull dependency images
        run: docker-compose pull

      - name: build
        run: docker-compose build

      - name: lint
        run: |
          docker-compose run --no-deps --entrypoint /usr/bin/env server flake8 accounter
          docker-compose run --no-deps --entrypoint ./dev-setup.sh web npm run lint

      - name: typechecking
        run: docker-compose run --no-deps --entrypoint ./dev-setup.sh web npm run typecheck

      - name: unit tests
        run: |
          docker-compose run --no-deps --entrypoint ./dev-setup.sh web npm t -- --coverage
          docker-compose run server coverage run --source='.' manage.py test
          docker-compose run --no-deps --entrypoint /usr/bin/env server coverage xml

      - name: report coverage
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: web, server
          fail_ci_if_error: true

      - name: check migrations
        run: docker-compose -f docker-compose.yml run --entrypoint /usr/bin/env server python manage.py makemigrations --check

      - name: setup kubectl
        run: |
          sudo apt-get update && sudo apt-get install -y apt-transport-https gnupg2 curl
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
          echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
          sudo apt-get update
          sudo apt-get install -y kubectl

      - name: setup helm
        run: |
          curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
          sudo apt-get install apt-transport-https --yes
          echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
          sudo apt-get update
          sudo apt-get install helm

      - name: setup skaffold
        run: |
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64
          sudo install skaffold /usr/local/bin/

      - name: setup minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb
          sudo dpkg -i minikube_latest_amd64.deb

      # this should somehow work automaticly
      - name: add helm repos
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo add jetstack https://charts.jetstack.io

      - name: end-to-end tests # change to production build
        run: |
          docker-compose -f docker-compose.qa.yml pull
          minikube start --cpus 2 --memory 4000
          skaffold run -p CI
          kubectl port-forward deployment/mockserver 1080 1080 &
          kubectl port-forward deployment/loadbalancer 8080 8080 &
          docker-compose -f docker-compose.qa.yml up --exit-code-from e2e
          minikube delete

      # Terraform
      - uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        id: init
        run: terraform -chdir=provider init

      - name: Terraform Validate
        id: validate
        run: terraform -chdir=provider validate -no-color

      - id: plan
        run: terraform -chdir=provider plan -no-color

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master'
        run: terraform -chdir=provider apply -auto-approve

      # Deploy
      - name: django deployment check
        if: github.ref == 'refs/heads/master'
        run: docker-compose -f docker-compose.yml -f docker-compose.production.yml run server ./manage.py check --deploy

      - name: Install doctl
        if: github.ref == 'refs/heads/master'
        uses: digitalocean/action-doctl@v2.1.0
        with:
          token: ${{ secrets.TF_VAR_DO_TOKEN }}

      - name: get k8s secrets
        if: github.ref == 'refs/heads/master'
        run: |
          echo ${{ secrets.DATABASE_CREDENTIALS }} | base64 --decode > k8s/database-credentials.yaml

      - name: Deploy
        if: github.ref == 'refs/heads/master'
        run: |
          doctl registry login
          doctl registry kubernetes-manifest > k8s/registry-secret.yaml
          doctl kubernetes cluster kubeconfig save accounter
          skaffold run -p production
